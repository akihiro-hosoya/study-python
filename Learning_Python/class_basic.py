# クラスの基礎知識

# クラス
print(type('a')) # <class 'str'>
"""
「class」というのが、文字列'a'の型は「strクラス」であることを示している。
言い換えると、「文字列'a'はstrクラスのオブジェクト」となる

「クラス」とは「オブジェクトを作成するための設計図」
オブジェクトがどんな値を持ち、どんなメソッドを持ち、どんな演算が可能かを詳細に記したもの
"""

# オブジェクト
"""
「プログラムの実行時に作成されて、
コンピュータのメモリ上に存在する何かしらのデータ」のこと

「あるクラスの設計図から作り出され、メモリ上に存在する実体」であることを強調するために
「インスタンス」（instance）と呼ぶことも

プログラミングの世界における「インスタンス」とは
「何かの概念を具体的に表したもの」のこと
"""

# 例
"""
int型は
「整数という概念を記述した型（クラス）」であり、

整数値「1」は
「整数という概念を基にコンピュータのメモリ上に作り出された具体的な値（インスタンス）」
"""

'''
2次元座標なら、
X軸の値とY軸の値、原点からの距離といった要素があり、それらの概念をコードで表したもの
がクラス、

そこから「X＝1.0」「Y＝1.0」などの具体的な値を持ち、メモリ上に存在するもの
がインスタンス
'''



# classの定義
# class クラス名:
#   クラス定義の本体（クラスが持つ属性を定義する）

# 2次元座標を表すクラス
"""
命名法：「CapWords」規約
「単語の先頭は大文字で始めて、名前が複数の単語でつづられるときには、
それらをアンダースコアなどを使わずにつなげる」
"""
# クラスの作成
class Point:
    pass
point1 = Point()
print(type(point1)) # <class '__main__.Point'>
# __main__というのは、スコープを表すもの


# objectクラス
"""
実はクラスを定義するだけで、Pythonのオブジェクトが持つ基本的な機能が備わるようになっている。
これを調べるにはdir関数が使える
"""
# dir関数
# dir([obj])
# obj = それが持つ属性を知りたいオブジェクト（省略可能）
"""
オブジェクトを引数に渡すと、そのオブジェクトが持つ「属性」（メソッドなど）を調べてくれる。
これを使って、Pointクラスのインスタンスである「point1」オブジェクトがどんな属性を持っているかを見る
"""
print(dir(point1)) # pass文しかないのにいくつもの属性が表示される
"""
これらがどこからきたものかというと、
Pythonが「全てのオブジェクトの基盤」となるクラスとして用意している「objectクラス」からだ。

このobjectクラスを基にして新規にクラスが作成され、Pythonのオブジェクトが持つべき基本的な属性が
自動的にobjectクラスから新しいクラスへと受け渡されるようになっている

class Point(object):
    pass
"""



# クラスやインスタンスの属性
# クラスの属性
"""
二次元座標では、
・X座標を表す値
・Y座標を表す値
が必要である。
これら2つは、値を保存しておくので、
Pointクラスの個々のインスタンスが持つ変数のようなものだ。
このことから、これらを「インスタンス変数」と呼ぶ

これ以外に次のような処理が可能だとうれしいかもしれない。
・原点からの距離を調べる
・他の座標との距離を調べる
　これらはインスタンスが持つ個々の値を利用して計算処理を行うので
「インスタンスメソッド」と呼ぶ。

座標を表すデータにはこれらの変数やメソッドを持つことを、
設計図としてPythonのコードを使って記述したのがPointクラスの定義であり、
それを基に具体的なX座標やY座標の値を持ったものがPointクラスのインスタンスとなる
"""

# インスタンス変数
# 先ほどの定義したクラスとインスタンスであれば、次のようにしてX座標とY座標を表すインスタンス変数にその値を代入できる
point1.x = 1.0
point1.y = 1.0
# これでPointクラスのインスタンスである「point1」が
# 「(1.0, 1.0)」という座標を表すようになった
# 確認
print(dir(point1)) # 最後にx, yが追加されている

# Pointクラスのインスタンスをもう一つ定義
point2 = Point()
print(dir(point2)) # これにはまだ属性xとyがない
"""
そうではなく、インスタンスを生成するタイミングで、それらの値を設定できると便利。
そして、実際にそうすることが可能
"""


# __init__メソッド
"""
クラス定義の中でdef文を使って関数を定義することで、それがメソッドとして扱われるようになる。
__init__メソッドはそうしたメソッドの1つだが、

Pythonでは特殊な扱いをされていて、インスタンスが生成される際に、
そのインスタンスごとに固有の初期化処理を行うために、
]このメソッドが自動的に呼び出されるようになっている
"""


# クラスの継承
"""
クラスは、何らかのクラスを基に新しく作成できるが、
そのときには「クラス名」に続けてかっこ「()」の中に「基となるクラス」を列挙していく。
このかっこと基となるクラス名を省略すると、それはobjectクラスを基にしたものとして扱われる
"""

